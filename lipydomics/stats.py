"""
    lipydomics/stats.py
    Dylan H. Ross
    2019/02/03

    description:
        A set of functions for performing statistical analyses on the lipidomics data. Generally, these functions 
        should produce one or more columns to associate with the data, as well as a label describing the analysis
        performed (what groupings are used, normalized or raw data, etc.). This data is added to the Dataset instance
        into a dictionary called stats, where the key is the label string and the value is a numpy.ndarray containing
        the desired statistic. Some functions will also return extra information, for example: when doing PCA analysis,
        the loadings of each feature are added as data in Dataset.stats and projections for each sample within user-
        specified groups can optionally be returned.

        if labels are not explicitly provided, they can generated in a systematic fashion:
            statistic_groups_raw-or-normed
        examples:
            ANOVA_ctrl-AY-VitE-AYVitE_normed
            PCA_ALL_normed

        WARNING: adding statistics with the same label as ones already added to the Dataset object will overwrite the 
        existing data
"""


import numpy as np
from scipy.stats import f_oneway
from sklearn.decomposition import PCA


def add_anova_p(dataset, group_names, label=None, normed=False):
    """
add_anova_p
    description:
        adds a column containing ANOVA p-values computed for user-specified groups
    parameters:
        dataset (lipydomics.data.Dataset) -- lipidomics dataset
        group_names (list(str)) -- groups to use to compute the ANOVA p-value
        [label (str)] -- label for the computed statistic [optional, default=None]
        [normed (bool)] -- Use normalized data (True) or raw (False) [optional, default=False]
"""
    group_data = np.array([_ for _ in dataset.get_data_bygroup(group_names, normed=normed)])
    anova_p = np.array([f_oneway(*feature)[1] for feature in zip(*group_data)])
    # generate a label if needed
    if not label:
        if normed:
            normed = "normed"
        else: 
            normed = "raw"
        label = "ANOVA_" + '-'.join(group_names) + "_" + normed
    # add the statistic into the Dataset
    dataset.stats[label] = anova_p


def add_pca3_loadings(dataset, label=None, normed=False, random_state=69):
    """
add_pca3_loadings
    description:
        adds three columns containing the loadings from a 3-component PCA computed on all of the features in the 
        Dataset to the Dataset.stats dict. Raw or normalized data can be used for the PCA. The PCA object is stored in
        the Dataset.pca3_ instance variable so that it can be used later on for computing group projections via the
        get_pca3_projections function. If the Dataset.pca3_ instance variable is already present, then it will be 
        overridden by the new one generated by this function.
        The loadings added to the Dataset.stats dictionary will have shape: (3, n_features)
    parameters:
        dataset (lipydomics.data.Dataset) -- lipidomics dataset
        [label (str)] -- label for the computed statistic [optional, default=None]
        [normed (bool)] -- Use normalized data (True) or raw (False) [optional, default=False]
        [random_state (int)] -- pRNG seed for deterministic results [optional, default=69]
"""
    # initialize the PCA object
    dataset.pca3_ = PCA(n_components=3, random_state=random_state)
    # fit the PCA to the data
    if normed:
        # need to transpose the intensities array to shape: (n_samples, n_features) for PCA
        dataset.pca3_.fit(dataset.normed_intensities.T)
    else:
        # need to transpose the intensities array to shape: (n_samples, n_features) for PCA
        dataset.pca3_.fit(dataset.intensities.T)
    # generate a name for the loadings data if one was not provided
    if not label:
        if normed:
            normed = "normed"
        else: 
            normed = "raw"
        label = "PCA3_loadings_" + normed
    # add the statistic into the Dataset
    dataset.stats[label] = dataset.pca3_.components_


def get_pca3_projections(dataset, group_names):
    """
"""
    pass
